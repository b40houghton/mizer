/*Mixins */

//gradient
@mixin gradient($degree, $topColor, $topValue, $bottomColor, $bottomValue){
    background-color:$topColor;
    background-image: linear-gradient($topColor $topValue, $bottomColor $bottomValue); 
}
 
@mixin clearfix{
    &:before,
    &:after {
        content: " ";
        display: table;
    }
    &:after {
        clear: both;
    }
}

//opacity
@mixin opacity($value){
    opacity: $value;
    filter: alpha(opacity=$value*100);
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="$value*100")";
}

//hide text
@mixin hide-text{
    overflow: hidden;
    text-indent: -9999px;
    display: block;
}



// bp (breakpoint) mixin
// these mixins build breakpoints mixins based off of the breakpoint matrix in the main configuration file
//      or from a custom number entered into the mixin
//      
// Paramters: 
//      - $breakpoint:  either a string referenceing a key value from $breakpoints or a number (with unit)
//      - $minOrMax:    string indicating whether to declare min-width or max-width on the media query
//                          - if no value is given, the mixin defaults to min-width   
//      
// usage example:
//      
//      // pull in the values from the already established 'med' key in the $breakpoints map 
//      // uses min-width in the media query
//      .someclass {
//          @include bp('med') {
//              some: style;
//          }
//      }
//      
//      // use a custom breakpoint 
//      // uses max-width in the media query
//      .someclass {
//          @include bp(1000px, 'max') {
//              some: style;
//          }
//      }
// 
// using @include bp-min('med') will log an error if the 'med' key does not exist in the breakpoints map
@mixin bp($breakpoint, $minOrMax: 'min'){
    
    // check to se if the breakpoint parameter is a string
    @if (type-of($breakpoint) == 'string') {

        // for error handliing, set variable to make true when value is found 
        $isInMap: false;

        // loop through all the breakpoints in the breakpoint map
        @each $key, $value in $breakpoints {
            
            // check to see if a passed in breakpoint parameter matches the current key in the map loop, if so, set media query based map value
            @if ($breakpoint == $key){
                @media only screen and (#{$minOrMax}-width: $value){
                    @content;
                }
                // map value was found, so set to true
                $isInMap: true;
            } 
        }

        // if the key does not exist, $isInMap will still be false - if so, throw an error
        @if ($isInMap == false) { 
            @error "#{$breakpoint} does not exist in the breakpoint map: #{$breakpoints}";

        }
    }

    // if the $breakpoint paramater is a number, simply pass it through to the media query
    @if (type-of($breakpoint) == 'number') {

        @media only screen and (#{$minOrMax}-width: $breakpoint){
            @content;
        }
    }

}
