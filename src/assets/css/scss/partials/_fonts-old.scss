//
// IMPORT GOOGLE FONTS
//

//Lobster
@import url(http://fonts.googleapis.com/css?family=Lobster);

//Petrona
@import url(http://fonts.googleapis.com/css?family=Petrona);


// clear the defaults
h1, h2, h3, h4, h5, h6, p {
  margin:0 0;
  line-height:1.2;
}


// the following uses the $bp and $font-sizing maps from _variables.scss
// the custom-bp-max and custom-bp-min mixins are also used
//@debug $font-sizing;

// the big for loop to start the whole process
@each $key, $value in $font-sizing {

	// before setting any breakpoint values, set the base size
	.font-#{$key} {
		font-size:map-get($value, 'min-size');
	

		// iitially set increment control to false
		$beginIncrement: false;
		$endIncrement: false;

		// get the difference between the font sizes
		$incrementDifference: map-get($value, 'max-size') - map-get($value, 'min-size');
		
		// remove units from the above value
		$incrementDifferenceNoUnit: $incrementDifference / ($incrementDifference * 0 + 1);
		
		// get value from the named max breakpoint size
		$breakpointMax: map-get($value, 'max-size-bp');
		
		// get value from the named min breakpoint size
		$breakpointMin: map-get($value, 'min-size-bp');

		// get the difference between the min and max breakpoints
		$breakpointDifference: map-get($bp, $breakpointMax) - map-get($bp, $breakpointMin);
		
		// remove units from the above value
		$breakpointDifferenceNoUnit: $breakpointDifference / ($breakpointDifference * 0 + 1);
		
		$incrementNumber: map-get($value, 'intervals');
		
		// calculate the unit percentage
		$intervalValue: $breakpointDifferenceNoUnit / $incrementNumber;
		$incrementPercentage: ($intervalValue) / 1;


		//@debug map-get($bp, $breakpointMin); 
		//@debug $breakpointDifferenceNoUnit; 
		

		// loop through all the possible breakpoints
		@each $subkey, $subvalue in $bp {
			
			@if $beginIncrement == false {
				$beginIncrement: if($subkey == $breakpointMin, true, false);
			}

			@if $beginIncrement == true {
				@if $endIncrement == false {


					// now loop though the increments in order to provide the new font size changes between preakpoints
					@for $i from 1 through $incrementNumber {

						// get the new breakpoint value buy adding the minimum value to the interval increase
						$newBreakpointValue: round(map-get($bp, $breakpointMin) + ($intervalValue * $i));


						@debug $newBreakpointValue;

						@include custom-bp-min(round($newBreakpointValue)){

							font-size:1.2rem;

						}

						//@debug round($newBreakpointValue);

					}

					@if $endIncrement == false {
						$endIncrement: if($subkey == $breakpointMax, true, false);
					}
				}
			} 
		}
	}
}


@function font($name, $breakpoint, $style) {
  @return unquote(nested-map-get($fonts, $name, $breakpoint, $style));
}


// custom-bp-max($width){