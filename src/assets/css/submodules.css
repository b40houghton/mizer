@import url('http://fonts.googleapis.com/css?family=Lobster');
@import url('http://fonts.googleapis.com/css?family=Petrona');
/*Mixins */
/*! normalize.css v3.0.2 | MIT License | git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio, canvas, progress, video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden], template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active, a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b, strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub, sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code, kbd, pre, samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button, input, optgroup, select, textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button, select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button, html input[type="button"], input[type="reset"], input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled], html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner, input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"], input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button, input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button, input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td, th {
  padding: 0; }

*, *:before, *:after {
  box-sizing: inherit; }

h1, h2, h3, h4, h5, h6, p, li, input, textarea, span, blockquote {
  margin: 0;
  line-height: 1.2;
  font-size: 16px; }

.font-xs {
  font-size: 10px; }
  @media only screen and (min-width: 1344px) {
    .font-xs {
      font-size: 13px; } }
  @media only screen and (min-width: 1920px) {
    .font-xs {
      font-size: 16px; } }

.font-sm {
  font-size: 12px; }
  @media only screen and (min-width: 1056px) {
    .font-sm {
      font-size: 14px; } }
  @media only screen and (min-width: 1344px) {
    .font-sm {
      font-size: 15px; } }
  @media only screen and (min-width: 1632px) {
    .font-sm {
      font-size: 17px; } }
  @media only screen and (min-width: 1920px) {
    .font-sm {
      font-size: 18px; } }

.font-md {
  font-size: 14px; }
  @media only screen and (min-width: 960px) {
    .font-md {
      font-size: 15px; } }
  @media only screen and (min-width: 1152px) {
    .font-md {
      font-size: 17px; } }
  @media only screen and (min-width: 1344px) {
    .font-md {
      font-size: 18px; } }
  @media only screen and (min-width: 1536px) {
    .font-md {
      font-size: 19px; } }
  @media only screen and (min-width: 1728px) {
    .font-md {
      font-size: 21px; } }
  @media only screen and (min-width: 1920px) {
    .font-md {
      font-size: 22px; } }

.font-lg {
  font-size: 22px; }
  @media only screen and (min-width: 883px) {
    .font-lg {
      font-size: 24px; } }
  @media only screen and (min-width: 998px) {
    .font-lg {
      font-size: 26px; } }
  @media only screen and (min-width: 1114px) {
    .font-lg {
      font-size: 28px; } }
  @media only screen and (min-width: 1229px) {
    .font-lg {
      font-size: 30px; } }
  @media only screen and (min-width: 1344px) {
    .font-lg {
      font-size: 32px; } }
  @media only screen and (min-width: 1459px) {
    .font-lg {
      font-size: 34px; } }
  @media only screen and (min-width: 1574px) {
    .font-lg {
      font-size: 36px; } }
  @media only screen and (min-width: 1690px) {
    .font-lg {
      font-size: 38px; } }
  @media only screen and (min-width: 1805px) {
    .font-lg {
      font-size: 40px; } }
  @media only screen and (min-width: 1920px) {
    .font-lg {
      font-size: 42px; } }

.font-xl {
  font-size: 28px; }
  @media only screen and (min-width: 883px) {
    .font-xl {
      font-size: 31px; } }
  @media only screen and (min-width: 998px) {
    .font-xl {
      font-size: 34px; } }
  @media only screen and (min-width: 1114px) {
    .font-xl {
      font-size: 38px; } }
  @media only screen and (min-width: 1229px) {
    .font-xl {
      font-size: 41px; } }
  @media only screen and (min-width: 1344px) {
    .font-xl {
      font-size: 44px; } }
  @media only screen and (min-width: 1459px) {
    .font-xl {
      font-size: 47px; } }
  @media only screen and (min-width: 1574px) {
    .font-xl {
      font-size: 50px; } }
  @media only screen and (min-width: 1690px) {
    .font-xl {
      font-size: 54px; } }
  @media only screen and (min-width: 1805px) {
    .font-xl {
      font-size: 57px; } }
  @media only screen and (min-width: 1920px) {
    .font-xl {
      font-size: 60px; } }

.font-xxl {
  font-size: 80px; }
  @media only screen and (min-width: 883px) {
    .font-xxl {
      font-size: 86px; } }
  @media only screen and (min-width: 998px) {
    .font-xxl {
      font-size: 92px; } }
  @media only screen and (min-width: 1114px) {
    .font-xxl {
      font-size: 98px; } }
  @media only screen and (min-width: 1229px) {
    .font-xxl {
      font-size: 104px; } }
  @media only screen and (min-width: 1344px) {
    .font-xxl {
      font-size: 110px; } }
  @media only screen and (min-width: 1459px) {
    .font-xxl {
      font-size: 116px; } }
  @media only screen and (min-width: 1574px) {
    .font-xxl {
      font-size: 122px; } }
  @media only screen and (min-width: 1690px) {
    .font-xxl {
      font-size: 128px; } }
  @media only screen and (min-width: 1805px) {
    .font-xxl {
      font-size: 134px; } }
  @media only screen and (min-width: 1920px) {
    .font-xxl {
      font-size: 140px; } }

.font-18px {
  font-size: 18px; }

.caps {
  text-transform: capitalize; }

.text-left {
  text-align: left; }

.text-right {
  text-align: right; }

.text-center {
  text-align: center; }

.text-justified {
  text-align: justify; }

.text-large {
  font-size: 1.25em; }

/* grid variables */
[class*='grid-'] {
  margin: 0 1% 1.875em;
  display: inline-block;
  position: relative;
  float: left;
  -webkit-transition: width 300ms;
          transition: width 300ms; }

.grid-xs-1, .grid-1 {
  width: 6.33333%; }

.grid-xs-2, .grid-2 {
  width: 14.66667%; }

.grid-xs-3, .grid-3 {
  width: 23%; }

.grid-xs-4, .grid-4 {
  width: 31.33333%; }

.grid-xs-5, .grid-5 {
  width: 39.66667%; }

.grid-xs-6, .grid-6 {
  width: 48%; }

.grid-xs-7, .grid-7 {
  width: 56.33333%; }

.grid-xs-8, .grid-8 {
  width: 64.66667%; }

.grid-xs-9, .grid-9 {
  width: 73%; }

.grid-xs-10, .grid-10 {
  width: 81.33333%; }

.grid-xs-11, .grid-11 {
  width: 89.66667%; }

.grid-xs-12, .grid-12 {
  width: 98%; }

@media only screen and (min-width: 480px) {
  .grid-sm-1 {
    width: 6.33333%; }
  .grid-sm-2 {
    width: 14.66667%; }
  .grid-sm-3 {
    width: 23%; }
  .grid-sm-4 {
    width: 31.33333%; }
  .grid-sm-5 {
    width: 39.66667%; }
  .grid-sm-6 {
    width: 48%; }
  .grid-sm-7 {
    width: 56.33333%; }
  .grid-sm-8 {
    width: 64.66667%; }
  .grid-sm-9 {
    width: 73%; }
  .grid-sm-10 {
    width: 81.33333%; }
  .grid-sm-11 {
    width: 89.66667%; }
  .grid-sm-12 {
    width: 98%; } }

@media only screen and (min-width: 768px) {
  .grid-md-1 {
    width: 6.33333%; }
  .grid-md-2 {
    width: 14.66667%; }
  .grid-md-3 {
    width: 23%; }
  .grid-md-4 {
    width: 31.33333%; }
  .grid-md-5 {
    width: 39.66667%; }
  .grid-md-6 {
    width: 48%; }
  .grid-md-7 {
    width: 56.33333%; }
  .grid-md-8 {
    width: 64.66667%; }
  .grid-md-9 {
    width: 73%; }
  .grid-md-10 {
    width: 81.33333%; }
  .grid-md-11 {
    width: 89.66667%; }
  .grid-md-12 {
    width: 98%; } }

@media only screen and (min-width: 1025px) {
  .grid-lg-1 {
    width: 6.33333%; }
  .grid-lg-2 {
    width: 14.66667%; }
  .grid-lg-3 {
    width: 23%; }
  .grid-lg-4 {
    width: 31.33333%; }
  .grid-lg-5 {
    width: 39.66667%; }
  .grid-lg-6 {
    width: 48%; }
  .grid-lg-7 {
    width: 56.33333%; }
  .grid-lg-8 {
    width: 64.66667%; }
  .grid-lg-9 {
    width: 73%; }
  .grid-lg-10 {
    width: 81.33333%; }
  .grid-lg-11 {
    width: 89.66667%; }
  .grid-lg-12 {
    width: 98%; } }

@media only screen and (min-width: 1280px) {
  .grid-xl-1 {
    width: 6.33333%; }
  .grid-xl-2 {
    width: 14.66667%; }
  .grid-xl-3 {
    width: 23%; }
  .grid-xl-4 {
    width: 31.33333%; }
  .grid-xl-5 {
    width: 39.66667%; }
  .grid-xl-6 {
    width: 48%; }
  .grid-xl-7 {
    width: 56.33333%; }
  .grid-xl-8 {
    width: 64.66667%; }
  .grid-xl-9 {
    width: 73%; }
  .grid-xl-10 {
    width: 81.33333%; }
  .grid-xl-11 {
    width: 89.66667%; }
  .grid-xl-12 {
    width: 98%; } }

@media only screen and (min-width: 1440px) {
  .grid-xxl-1 {
    width: 6.33333%; }
  .grid-xxl-2 {
    width: 14.66667%; }
  .grid-xxl-3 {
    width: 23%; }
  .grid-xxl-4 {
    width: 31.33333%; }
  .grid-xxl-5 {
    width: 39.66667%; }
  .grid-xxl-6 {
    width: 48%; }
  .grid-xxl-7 {
    width: 56.33333%; }
  .grid-xxl-8 {
    width: 64.66667%; }
  .grid-xxl-9 {
    width: 73%; }
  .grid-xxl-10 {
    width: 81.33333%; }
  .grid-xxl-11 {
    width: 89.66667%; }
  .grid-xxl-12 {
    width: 98%; } }

@media only screen and (min-width: 1920px) {
  .grid-xxxl-1 {
    width: 6.33333%; }
  .grid-xxxl-2 {
    width: 14.66667%; }
  .grid-xxxl-3 {
    width: 23%; }
  .grid-xxxl-4 {
    width: 31.33333%; }
  .grid-xxxl-5 {
    width: 39.66667%; }
  .grid-xxxl-6 {
    width: 48%; }
  .grid-xxxl-7 {
    width: 56.33333%; }
  .grid-xxxl-8 {
    width: 64.66667%; }
  .grid-xxxl-9 {
    width: 73%; }
  .grid-xxxl-10 {
    width: 81.33333%; }
  .grid-xxxl-11 {
    width: 89.66667%; }
  .grid-xxxl-12 {
    width: 98%; } }

.container {
  width: 100%;
  margin: 0 auto;
  position: relative;
  padding: 0 15px; }
  @media only screen and (min-width: 1280px) {
    .container {
      width: 1280px; } }

.row {
  margin: 0 -1%; }
  .row:before, .row:after {
    content: " ";
    display: table; }
  .row:after {
    clear: both; }
  @media only screen and (min-width: 768px) {
    .row.equal-heights {
      display: -webkit-box;
      display: -webkit-flex;
      display: -ms-flexbox;
      display: flex; } }

/* helper classes*/
.pull-left {
  margin-left: 0; }

.pull-right {
  margin-right: 0; }

.hidden {
  display: none; }

.invisible {
  visibility: hidden; }

.clearfix:before, .clearfix:after {
  content: " ";
  display: table; }
.clearfix:after {
  clear: both; }

.text-left {
  text-align: left; }

.text-right {
  text-align: right; }

.text-center {
  text-align: center; }

.text-justified {
  text-align: justify; }

.text-large {
  font-size: 1.25em; }

.image, .rounded, .circle, .thumbnail {
  max-width: 100%;
  height: auto; }
  .image img, .rounded img, .circle img, .thumbnail img {
    max-width: 100%;
    height: auto; }

.rounded {
  border-radius: 1em; }
  .rounded img {
    border-radius: 1em; }

.circle {
  border-radius: 50%; }
  .circle img {
    border-radius: 50%; }

.thumbnail {
  padding: 1%;
  border: 1px solid #eee; }

.margin {
  margin: 1em !important; }

.no-margin {
  margin: 0 !important; }

.no-margin-top {
  margin-top: 0 !important; }

.no-margin-bottom {
  margin-bottom: 0 !important; }

.margin-top {
  margin-top: 2em !important; }

.margin-bottom {
  margin-bottom: 2em !important; }

.padding {
  padding: 1em !important; }

.no-padding {
  padding: 0 !important; }

.no-padding-top {
  padding-top: 0 !important; }

.no-padding-bottom {
  padding-bottom: 0 !important; }

.padding-top {
  padding-top: 2em !important; }

.padding-bottom {
  padding-bottom: 2em !important; }

.list-none {
  list-style: none;
  padding-left: 0; }

@media only screen and (max-width: (max: 479px)0) {
  .hide-xs {
    display: none !important; } }

@media only screen and (max-width: (min: 480px, max: 767px)0) {
  .hide-sm {
    display: none !important; } }

@media only screen and (max-width: (min: 768px, max: 1024px)0) {
  .hide-md {
    display: none !important; } }

@media only screen and (max-width: (min: 1025px, max: 1279px)0) {
  .hide-lg {
    display: none !important; } }

@media only screen and (max-width: (min: 1280px, max: 1439px)0) {
  .hide-xl {
    display: none !important; } }

@media only screen and (max-width: (min: 1440px, max: 1919px)0) {
  .hide-xxl {
    display: none !important; } }

@media only screen and (min-width: (min: 1920px)1) {
  .hide-xxxl {
    display: none !important; } }

[class*='show-'] {
  display: none !important; }

@media only screen and (max-width: (max: 479px)) {
  .show-xs {
    display: inline-block !important;
    display: initial !important; } }

@media only screen and (min-width: (max: 479px)) and (max-width: (min: 480px, max: 767px)) {
  .show-xs {
    display: inline-block !important;
    display: initial !important; } }

@media only screen and (min-width: (min: 480px, max: 767px)) and (max-width: (min: 768px, max: 1024px)) {
  .show-sm {
    display: inline-block !important;
    display: initial !important; } }

@media only screen and (min-width: (min: 768px, max: 1024px)) and (max-width: (min: 1025px, max: 1279px)) {
  .show-md {
    display: inline-block !important;
    display: initial !important; } }

@media only screen and (min-width: (min: 1025px, max: 1279px)) and (max-width: (min: 1280px, max: 1439px)) {
  .show-lg {
    display: inline-block !important;
    display: initial !important; } }

@media only screen and (min-width: (min: 1280px, max: 1439px)) and (max-width: (min: 1440px, max: 1919px)) {
  .show-xl {
    display: inline-block !important;
    display: initial !important; } }

@media only screen and (min-width: (min: 1440px, max: 1919px)) and (max-width: (min: 1920px)) {
  .show-xxl {
    display: inline-block !important;
    display: initial !important; } }

@media only screen and (mim-width: (min: 1920px)1px) {
  .show-xxxl {
    display: inline-block !important;
    display: initial !important; } }

button:focus {
  outline: none; }

.button, .primary, .secondary, .tertiary, .xx-small, .x-small, .small, .large, .x-large {
  color: #fff;
  text-decoration: none;
  padding: 0.5em 1em;
  margin: 16px 0;
  margin: 1rem 0;
  line-height: 32px;
  line-height: 2rem;
  border-radius: 12px;
  border: 0;
  text-transform: uppercase;
  display: inline-block;
  *zoom: 1;
  *display: inline; }
  .button:focus, .primary:focus, .secondary:focus, .tertiary:focus, .xx-small:focus, .x-small:focus, .small:focus, .large:focus, .x-large:focus {
    outline: none; }

.primary {
  background-color: #480a3c; }

.secondary {
  background-color: #666; }

.tertiary {
  background-color: #999; }

.xx-small {
  font-size: 0.75em; }

.x-small {
  font-size: 0.8125em; }

.small {
  font-size: 0.875em; }

.large {
  font-size: 1.125em; }

.x-large {
  font-size: 1.375em; }

.btn-back {
  position: relative;
  text-transform: uppercase;
  font-size: 1em;
  background: none;
  color: #ffffff;
  opacity: 1;
  line-height: 0.8;
  margin: 0.5em 0;
  padding-left: 1.25em;
  border: 0; }
  .btn-back:focus {
    outline: none; }
  .btn-back:before {
    content: "";
    position: absolute;
    width: 0.75em;
    height: 0.75em;
    -webkit-transform: rotate(-45deg);
        -ms-transform: rotate(-45deg);
            transform: rotate(-45deg);
    left: 0.2em;
    top: 0;
    border-left: 2px solid #333;
    border-top: 2px solid #333; }

.wide {
  padding: 0 2em; }

.btn-close {
  top: 0;
  right: 0;
  opacity: 0.4;
  position: absolute;
  color: #ffffff;
  background: #333;
  border: 0;
  width: 2.25em;
  height: 2.25em;
  border-radius: 0.25em;
  -webkit-transition: all 300ms;
          transition: all 300ms; }
  .btn-close:focus {
    outline: none; }
  .btn-close:before, .btn-close:after {
    position: absolute;
    display: block;
    content: "";
    width: 3.25em;
    height: 3.25em;
    top: 0.7em;
    -webkit-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
            transform: rotate(45deg); }
  .btn-close:before {
    border-left: 1px solid #ffffff;
    left: 0.55em; }
  .btn-close:after {
    border-top: 1px solid #ffffff;
    left: -1.55em; }
  @media only screen and (min-width: 1025px) {
    .btn-close:hover {
      opacity: 0.8; } }

.caption {
  font-size: 1em;
  line-height: 1.5em;
  font-weight: 300; }
  .caption.text-lg {
    font-size: 1.125em; }

.icon {
  width: 2.5em;
  height: 2.5em; }

.image, .rounded, .circle, .thumbnail {
  position: relative; }
  .image .play, .rounded .play, .circle .play, .thumbnail .play {
    display: none;
    bottom: 9%;
    left: 5%;
    fill: #ffffff; }
    .image .play + img, .rounded .play + img, .circle .play + img, .thumbnail .play + img {
      display: none; }
  .image.video, .video.rounded, .video.circle, .video.thumbnail {
    cursor: pointer; }
    .image.video .play, .video.rounded .play, .video.circle .play, .video.thumbnail .play {
      display: block;
      position: absolute;
      -webkit-filter: drop-shadow(0 0 10px #000);
              filter: drop-shadow(0 0 10px #000);
      height: 1.5em;
      width: 1.5em; }
      .image.video .play + img, .video.rounded .play + img, .video.circle .play + img, .video.thumbnail .play + img {
        display: block; }
      @media only screen and (min-width: 1025px) {
        .image.video .play, .video.rounded .play, .video.circle .play, .video.thumbnail .play {
          height: 2.5em;
          width: 2.5em;
          -webkit-transition: all 200ms;
                  transition: all 200ms; }
          .image.video .play:hover, .video.rounded .play:hover, .video.circle .play:hover, .video.thumbnail .play:hover {
            fill: #333; } }

.link, .link-list li a {
  font-size: 1.125em;
  text-decoration: none;
  position: relative; }
  .link .fa-angle-right, .link-list li a .fa-angle-right {
    margin-left: 0.5em; }
  .link .fa-angle-left, .link-list li a .fa-angle-left {
    margin-right: 0.5em; }
  .link.link-lg, .link-list li a.link-lg {
    font-size: 1.5em; }
  .link.disabled, .link-list li a.disabled {
    pointer-events: none;
    opacity: 0.5;
    cursor: not-allowed; }

.link-list li {
  margin: 1.5em 0; }
  .link-list li a {
    -webkit-transition: text-shadow 300ms;
            transition: text-shadow 300ms;
    font-weight: 300; }
    @media only screen and (min-width: 1025px) {
      .link-list li a:hover {
        text-shadow: -0.125px 0 0 #333, 0.125px 0 0 #333; } }


/*# sourceMappingURL=data:application/json;base64, */