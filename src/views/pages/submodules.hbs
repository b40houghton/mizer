<!DOCTYPE html>
<!--[if lt IE 7]>      <html class="no-js lt-ie9 lt-ie8 lt-ie7" id="desktop"> <![endif]-->
<!--[if IE 7]>         <html class="no-js lt-ie9 lt-ie8" id="desktop"> <![endif]-->
<!--[if IE 8]>         <html class="no-js lt-ie9 ie8" id="desktop"> <![endif]-->
<!--[if IE 9]>         <html class="no-js lt-ie10 ie9" id="desktop"> <![endif]-->
<!--[if gt IE 9]><!--> <html class="no-js" id="desktop"> <!--<![endif]-->
<head>

	<!-- page title tag -->
	<title>SubModules | Mizer</title>
	<!-- page meta tags -->
	<meta charset="utf-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1" />
	<meta name="description" content="" />
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
	<meta name="robots" content="all" />
	<!-- opengraph meta tags -->
	<meta property="og:title" content="" />
	<meta property="og:type" content="" />
	<meta property="og:image" content="" />
	<meta property="og:url" content="" />
	<meta property="og:description" content="" />
	<meta property="og:site_name" content="" />
	<meta property="fb:admins" content="" />
	{{> headFiles}}
</head>
<body>
	<div class='wrapper'>
		{{>header}}
		<div id="body">
			<div class="container clearfix">
				<div class="row">
					<div class="grid-12">
						<h1 class="h1">Mizer SubModules</h1>
					</div>
				</div>
                <div class="row">
                    <div class="grid-12 module">
                        <h2>SubModules are the core elements of any website (i.e Buttons, Links, Headings, etc). You can think of SubModules as atoms in <a href='http://bradfrostweb.com/blog/post/atomic-web-design/' target='_blank' title="Atomic Design | Brad Frost">Atomic Design</a>.
                            A SubModule can be used throughout the site for a variety of instances. By default, Mizer comes with a few SubModules already in place. Let's take
                            a look at how they would be created from scratch.</h2>


                        <!-- Creating a submodule -->
                        <h3 class="h2" id="#creating-module">Creating a SubModule</h3>
                        <hr />
                        <p class="text-large">Creating a SubModule is simple. First, be certain that the SubModule you would like to create, would be used similiarly throughout
                        your site. Let's start simple with a button. A button will typically follow the same design throughout a site, granted a few minor changes. With Mizer we 
                        can set a default style, and easily call in the differences between buttons.</p>
                        <div class="row">
                        	<div class="grid-xsm-12 grid-sm-4 no-margin-bottom">
		                        <p class="text-center">First, we create the Handlebars View, src/views/submodules/button.hbs:</p>
                        	</div>
                        	<div class="grid-xsm-12 grid-sm-4 no-margin-bottom">
                        		<p class="text-center">Next, we create the JSON model, src/models/submodules/button.json</p>
                        	</div>
                        	<div class="grid-xsm-12 grid-sm-4 no-margin-bottom">
                        		<p class="text-center">Lastly, we create the SASS styles, src/assets/css/scss/submodules/_button.scss:</p>
                        	</div>
                        </div> 
                        <div class="row equal-heights">
	                        <code class="grid-xsm-12 grid-sm-4">
	                        	<span class="t">&lt;button <span class="a">class=<span class="s">"button &#123;&#123;'type'&#125;&#125;"</span></span>&gt;</span><br />
	                        		<span class="col1">&#123;&#123;'content'&#125;&#125;<span><br />
                        		<span class="t">&lt;/button&gt;</span>
	                        </code>
	                        <code class="grid-xsm-12 grid-sm-4">
	                        	{<br />
									<span class="col1 s">"name"</span> : <span class="s">"button"</span><br />
									<span class="col1 s">"type"</span> : <span class="s">"primary"</span><br />
									<span class="col1 s">"content"</span> : <span class="s">"Default Button"</span><br />
								}
	                        </code>
	                        <code class="grid-xsm-12 grid-sm-4">
		                        <span class="t">.button{</span><br />
			                        <span class="t col1">&amp;.primary{</span><br />
		                        		<span class="a col2">background:</span><span class="s">#333333</span><span class="a">;</span><br />
			                        <span class="t col1">}</span><br />
		                        <span class="t">}</span><br/>
		                        
	                        </code>
                        </div> 
                        <p class='text-large'>
                        	If we look at the three separate files above, we can conclude that the handlebars file is pulling data from the JSON file, and being styled
                        	by the SASS file. Configurations and styles can be added to create increasingly complex submodules.
                        </p>
                        <!-- / Creating a submodule -->

                        <!-- Calling a submodule -->
                        <h3 class="h2" id="#creating-module">Calling a SubModule</h3>
                        <hr />
                        <p class="text-large">Now that we've created a basic SubModule, we can place it anywhere on one of our pages with a simple SubModule call:</p>
                        
                		<code>&#123;&#123;$ 'button'&#125;&#125;</code>
                		<p class="text-large">Which outputs everything we've created within our files:</p>
                		<p class="text-large">Let's kick it up a notch. With a similar example, we've added a couple different configurations commonly 
                		used with a button. We can pass these configurations by making a slightly different call:</p>
                		<code>
                		&#123;&#123;$ 'button' type='secondary' size='x-large' content='Custom Btn' &#125;&#125;
                		</code>
                		<p class="text-large">Which will output our desired configurations:</p>
                		{{{$ 'button' type="secondary" size="x-large" content='Custom Btn'}}}
                        <!-- /calling a Module -->

                        <!-- styling a module -->
                        <h3 class="h3">Styling a Module</h3>
                        <hr />
                        <p class="text-large">
                        	For every module, there should also be a seperate Sass file. Whether the file should output it's own individual set of css or comile
                        	into the main.css, is up to you. Each module has it's own Sass file in order to keep the whole project maintainable. Every module should
                        	have a unique class where styles are built off. For example, the 'content' module, has a class of '.content', where all 'content'
                        	styles are built upon, an example below:
                        </p>
                        <p>src/assets/css/scss/modules/_content.scss:</p>
                        <code>
	                        <span class="t">.content{</span><br />
	                        	<span class="t col1">.content-wrapper{</span><br />
	                        		<span class="a col2">width:</span><span class="s">100%</span><span class="a">;</span><br />
	                        	<span class="t col1">}<span><br />
	                        	<span class="t col1">.image-wrapper{</span><br />
	                        		<span class="a col2">width:</span><span class="s">25%</span><span class="a">;</span><br />
	                        	<span class="t col1">}</span><br />
	                        	<span class="t col1">.image-wrapper + .content-wrapper{</span><br />
	                        		<span class="a col2">width:</span><span class="s">75%</span><span class="a">;</span><br />
	                        	<span class="t col1">}<span><br />
	                        <span class="t">}</span>
                        </code>
                        <p><a href="/pages/css/modules" class="link">More on Module Styling <i class="fa fa-angle-right"></i></a></p>
                        <!-- /styling a module -->
                        
                    </div>
                </div>

			</div>
		</div>
		{{>footer}}

	</div>
	{{> bodyFiles}}
</body>
</html>
